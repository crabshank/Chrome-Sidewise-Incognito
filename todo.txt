add option 'sidebar follows focused window'
    we MUST implement a non destructive .redock in this case, so everything about the current sidebar
    state is retained such as how scrolled it is etc. to do:
        resize before-undock window to original position/state
        get metrics of new dock window
        resize new dock window as needed per metrics
        move sidebar to new desired position
        save new dock window's id and remembered position/state
turn a page's .unread state back on when the page is reloaded; onComplete might be a good spot to do this
fix the "focused chrome window" functionality:
    turn it into a class
    .windows
    .chromeIsFocused
    setFocus(): remove windowId from array, then push windowId on top
    removeWindow(): remove windowId from array
    getCurrentFocus(): get top
    setChromeFocused(true/false): flag
find out exact reason why tabs mass moved from an "open selected links" open are showing up in
    pagetree in a different order than in fancytree; probably something to do with event timings;
    we should fix this so that (a) smart on close works as visually expected, (b) so that
    things like forcing mass-move ordering to be in browser's tab-ordering or in tab.id ordering
    stay consistent
    should be doable by always passing a beforeSiblingId (and/or afterSiblingId) to fancytree;
    might have to pass both if we want to ensure things always get ordered properly because
    if things happen to fire out-of-order we may not have the beforeSiblingId we would expect
    to find there
fix detect-monitors.html for macs:
    macs don't maximize a chrome win to width, just height. so we cannot use that for detection of widths.
    alternate plan:
        get primary screen.width, .left
        move window to +.width
        if new window.left == screen.width+.left:
            there's a monitor here
            store monitor details?
                this will failcakes because we do not know the 2nd monitor width!
    alertnate alternate plan:
        on all OS's obtain default monitor metrics from bg.screen initially
        for windows: ask user to detect monitors, allow the detect button in settings
        for macs: tell user if they want to use 2+ monitors they have to put in
            all their own details (except for mon 1 which details should be 'locked')
            allow ordering of the monitors with up/down arrows to put them in the correct
            order, but keep primary monitor locked and labeled as such
abuse <img onerror=""> to catch favicons that fail to load
    replace them with chrome://favicon/url - will need to instruct background page to do this,
    best approach may be:
        if row status == complete: setTimeout 250 bg.tree.updatePage(chrome://favicon/url)
        if row status != complete: clear bg.tree row's .favicon and allow bg page onCompleted()
          to populate it again in its turn
when moving a page due to webnav-events, try to preserve ordering, either:
    - mimic ordering in chrome tabbar (tab.index based)
    - mimic original opening-ordering (tab.id based)
    - perhaps should be a user pref
more handling for favicons when reloading a tab, when switching pages in a given tab
    when reloading a tab: retain the existing favicon
    when switching pages in a tab:
        if new url is the same domain: retain the existing favicon (may change later in onCompleted)
        if different domain: reset to (tab.faviconUrl || chrome://favicon)
optional auto-raising of sidebar when refocusing docked chrome window
sidebarhandler.redock() which doesn't destroy the sidebar, just moves it and adjusts the dock wins
adjusting sidebar width when right edge of dock window is moved (width changes)
keeping sidebar attached to dock window when its left/top is moved
adjusting sidebar height when dock window height is modified
adjusting sidebar width by dragging width of the sidebar to new width
adjusting width of dock window by dragging left of the sidebar with corresponding change to width
undock sidebar if whole sidebar is dragged:
    left changes but width does not
consider what to do if sidebar height and top are modified
    either undock or reproportion dock window not sure
visual notification when sidebar is undocked..?
    upon undocking maybe just shrink height of sidebar to some fixed amount to give visual
    indication that it was done
remember docked vs undocked state in localStorage and restore afterwards
    if was docked, dock to first available window on chrome launch
    if was undocked, also remember and restore left/top/width/height of sidebar
dropdown menu for sidebar options button
toggling attachment side of sidebar via sidebar options button
toggling dock state of sidebar via sidebar options button
fancytree
    context menu
    multiselect
        receive events when band selecting tabs in chrome's tabbar and multiselect them?
        highlight rows in the tabbar as they are multiselected in tree?
    remember collapsed states in bg.tree
    hibernate button
    unread state, probably do not need/want to store unread state in bg.tree just do it UIwise
    labels
    window element
        labelling
        (# tabs) hint
        moving tabs between windows via sidebar
        moving tabs between windows via chrome detatch/attach calls
    add selected page/s as bookmarks
        prompt for name of bookmark group should be a dropdown or option for 'new bookmark group'
    pinned state
        visual representation
            addRowType should take some prefixButtons array that works like the hideButtons,
            they appear at the beginning of a row and have onClick handling and tooltips
        toggling via context menu
    search-as-you-type box
    add an event handler per rowType, onFormatTitle, which allows us to override the default
        of label+title populating it with any html we like; this will become necessary if
        we do window rows (# pages) because otherwise we'll end up with Window 1: (33 pages)
        ... or we could just stick with Window 1: 33 pages for now
    trigger a RowType.onChildrenChanged method on all parents
        that have this method defined on them, after add/remove/moveElem is called on their children
        this could be used to set a window row's itemTitle to (# pages) dynamically
    Groups
    abstract all of this into FancyTree.js::PageTree.js nicely

hibernation
    implement hibernated pages
        store bg.tree to localStorage on a timer
            keep a bg.tree.lastModifiedTimestamp to avoid doing it needlessly
        restore bg.tree on chrome launch
        show all stored pages in hibernated state in sidebar
            use fake temp ids e.g. ptemp1238974892
    implement reassociation of opened tabs to existing hibernated pages
        only when transitionType is 'reload' probably
        probably want to use referrer and historylength as hints provided from content script sniffing
    manually hibernating a page/s
    manual unhibernation of page/s
    hibernation row styling
    figure out what to do about window rows with respect to hibernation
        option 1: transform all Windows to Groups upon session restore
        option 2: work out some method to figure out which old Window corresponds to which
            new Window -- assuming we get more than one Window during restore
            in this case maybe start them out as Groups and then change them into Windows
            once we detect a tab was restored (auto dehibernated) within a given window that is
            a fake Group

bookmarks sidebar
history sidebar
tab branching history sidebar
    build branching history via monitoring requests in bg.tree
detect pages that were POSTed to via webRequest.onBeforeRequest.method or similar
    store the .method in the page tree
    when manually hibernating a page, warn the user that unhibernating the POSTed page will probably break
fancytree 'group' element
    if group consists of tabs in 1 window do not show any window subelements under group
    if group consists of tabs in 2+ windows DO show window subelements
    do this dynamically
        upon chrome launch, all tabs under a group element should probably show as not under a window group
        ..?
notepad sidebar
horizontally split sidebar
options page
    various options
    redetect monitors button
    list of sidebars with checkbox toggling of their visibility
    instead of being tabbed, just use a TOC, h1's with underlines, listing all opts on a single page
donation page/functionality
ability to add new sidebars simply via url specification, maybe need icon and label also provided by user
ability to add/remove new sidebars from foreign extensions calling onSendRequestExternal to us
ability to auto-hide sidebar top nav bar (reveal when mouse gets near)
    something like this:
    $('#headerBox').slideToggle(100, function() { $('#header').height(1) });
    should actually shrink height of #headerBox whilst we also shrink height of #header, but do not
    want to .hide() #header at end or it messes up page structure
    after this, slide down a few pixel auto-hide-detector bar which un-autohides #headerBox on hover
smart arrows for navigating sidebar nav buttons when there isn't enough space to show them all
attribute http://www.iconlet.com/info/87692_light-bulb_16x16, famfamfam.mini
